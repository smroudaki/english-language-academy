@model ESL.Web.Areas.Dashboard.Models.ViewModels.Model_PaymentCreate
@using ESL.Services.BaseRepository

@{
    ViewBag.Title = "تراکنش جدید";
    Layout = "~/Areas/Dashboard/Views/Shared/_Master.cshtml";
}

<div class="panel panel-body panel-default navigation">

    <div class="pull-left" style="margin-left: 10px;">
         <a href="@Url.Action("Index", "Payment")" data-toggle="tooltip" data-placement="auto" title="برگشت به صفحه قبل">
             <i class="glyphicon glyphicon-arrow-left navigation-btn-icon"></i>
         </a>
    </div>

    <div class="pull-left">
        <h4 class="navigation-title"><b>@ViewBag.Title</b></h4>
    </div>

</div>

<div class="panel panel-default">
    <div class="panel-body">

        @using (Html.BeginForm("Create", "Payment", FormMethod.Post, new { enctype="multipart/form-data"}))
        {
            @Html.AntiForgeryToken()

            <div class="modal-main">
                <div class="row" style="margin: 0 -30px;">

                    <div class="col-md-6">

                        <div class="form-group">
                            @Html.LabelFor(model => model.User, htmlAttributes: new { @class = "control-label" })
                            @Html.DropDownListFor(model => model.User, new List<SelectListItem>() { new SelectListItem() { Value = "", Text = "لطفا کاربر مورد نظر را انتخاب کنید ..." } }, new { @class = "form-control Select2_Normal" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label" })
                            @Html.DropDownListFor(model => model.Title, new List<SelectListItem>() { new SelectListItem() { Value = "f495d70a-5540-4105-9727-0bcf1524fa44", Text = "بازگشت به حساب" }, new SelectListItem() { Value = "d66561cc-1ee8-4187-955f-33273404fced", Text = "بازگشت به حساب بانکی" }, new SelectListItem() { Value = "2f97b9da-c572-4ec3-9c83-ab9f7822399b", Text = "شارژ" }, new SelectListItem() { Value = "27b417f5-8647-49d2-8af5-01785956c040", Text = "کسر از حساب" } }, new { @class = "form-control Select2_Normal" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Way, htmlAttributes: new { @class = "control-label" })
                            @Html.DropDownListFor(model => model.Way, Rep_CodeGroup.Get_AllCodesWithGroupGUID(CodeGroup.PaymentWay), new { @class = "form-control Select2_Normal" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
                            <div class="input-group">
                                <span class=" input-group-addon"><i class="glyphicon glyphicon-pencil"></i></span>
                                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>

                    </div>

                    <div class="col-md-6">

                        <div class="form-group">
                            @Html.LabelFor(model => model.Cost, htmlAttributes: new { @class = "control-label" })
                            <div class="input-group">
                                <span class=" input-group-addon"><i class="glyphicon glyphicon-pencil"></i></span>
                                @Html.EditorFor(model => model.Cost, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.Cost, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.TrackingToken, htmlAttributes: new { @class = "control-label" })
                            <div class="input-group">
                                <span class=" input-group-addon"><i class="glyphicon glyphicon-pencil"></i></span>
                                @Html.EditorFor(model => model.TrackingToken, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.TrackingToken, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            <label class="control-label">ضمیمه</label>
                            <input class="form-control" type="file" name="document" />
                        </div>

                    </div>

                </div>
            </div>

            <div style="margin-top:20px;">
                <a href="@Url.Action("Index", "Payment")" class="btn btn-danger modal-btn-Dual pull-left">انصراف</a>
                <button class="btn btn-success modal-btn-Dual pull-right " type="submit" name="btn-Delete">تایید</button>
            </div>
        }

    </div>

</div>

@section Scripts {

    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

    <script src="~/Scripts/Plugins/jQuery.Select2/select2.js"></script>
    <script src="~/Scripts/Plugins/jQuery.Select2/i18n/fa.js"></script>

    <script src="~/Scripts/MyScripts/Select2_Config.js"></script>

    <script>
        $(document).ready(function () {
            $("#User").select2({
                theme: "bootstrap",
                language: "fa",
                dir: "rtl",
                tokenSeparators: [',', ' '],
                minimumResultsForSearch: 6,
                placeholder: 'انتخاب کنید',
                ajax: {
                    url: '/Payment/Get_Users',
                    dataType: "json",
                    data: function (params) {
                        return {
                            searchTerm: params.term
                        };
                    },
                    processResults: function (data, params) {
                        return {
                            results: data
                        };
                    }
                }
            });
        });
    </script>

}
